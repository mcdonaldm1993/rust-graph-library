var searchIndex = {};
searchIndex['graph'] = {"items":[[0,"","graph",""],[1,"GraphPath","","A struct used to represent a path in a graph."],[1,"UndirectedAdjListGraph","","An undirected graph represented by an adjacency list.\n \nThe graph can be used both as a weighted or unweighted graph depending on which edge insertion operation is used."],[6,"Graph","","The `Graph` trait is used to implement common operations on a graph and provide implementations of graph algorithms\nthat use these operations so that concrete types of graphs can be implemented and the algorithms used on them."],[9,"add_vertex","","The method to add a vertex to the graph.",0],[9,"add_edge","","The method to add an edge to the graph between two vertices.",0],[9,"add_edge_with_weight","","The method to add an edge to the graph between two vertices, specifying a weight.",0],[9,"get_vertex_ids","","The method to return a vector of IDs of all vertices in the graph.",0],[9,"get_vertex_data","","The method to retrieve the data associated with a vertex.",0],[9,"get_vertex_neighbours","","The method to get the list of vertices that are adjacent to a vertex.",0],[9,"get_edge_weight","","The method to get the weight of an edge between two vertices.",0],[9,"is_adjacent","","The method to check if two vertices are adjacent.",0],[9,"is_id_in_graph","","The method to check if a vertex is in the graph.",0],[9,"vertex_degree","","The method to return the degree of a vertex.",0],[10,"dijkstras_shortest_path","","Performs Dijkstra's shortest path algorithm on the graph.",0],[10,"dijkstras_shortest_paths","","Performs Dijkstra's shortest path algorithm on the graph.",0],[10,"diameter_path","","Finds the diameter of the graph.",0],[10,"k_core_decomposition","","Finds the k core of each vertex in the graph.",0],[10,"clone","","",1],[10,"fmt","","",1],[10,"get_distance","","Retrieves the distance of the `GraphPath`",1],[10,"get_path","","Retrieves the path.",1],[10,"clone","","",2],[10,"new","","Creates a new emtpy `UndirectedAdjListGraph<I, D>`.",2],[10,"new_with_capacity","","Creates a new empty `UndirectedAdjListGraph<I, D>` with the given initial capacity.",2],[10,"add_vertex","","",2],[10,"add_edge","","Adds an edge to the graph between the two vertices.",2],[10,"add_edge_with_weight","","Adds an edge to the graph between the two vertices.",2],[10,"get_vertex_ids","","",2],[10,"get_vertex_data","","",2],[10,"get_vertex_neighbours","","",2],[10,"get_edge_weight","","",2],[10,"is_adjacent","","",2],[10,"is_id_in_graph","","",2],[10,"vertex_degree","","",2]],"paths":[[6,"Graph"],[1,"GraphPath"],[1,"UndirectedAdjListGraph"]]};
initSearch(searchIndex);
